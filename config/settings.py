"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url
from dotenv import load_dotenv
import json

def load_abi(filename):
    abi_path = os.path.join(BASE_DIR,'config' ,'contracts', 'abis', filename)
    with open(abi_path, 'r') as file:
        return json.load(file)

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-5iqa%ww50qm&b*%n6b_!eks^8v7rzffrhf)qv0iv$1k^+=v+_d'
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'your-default-secret-key-for-dev')

# API Keys
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
COINGECKO_API_KEY = os.getenv('COINGECKO_API_KEY')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'False') == 'True'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'ERROR',
        },
        'api': {  # Add this for your app
            'handlers': ['console'],
            'level': 'ERROR',
        },
    },
}

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', '').split(',') + [
    'localhost',
    '127.0.0.1',
    '.onrender.com',  # Allows all subdomains of onrender.com
]

CSRF_TRUSTED_ORIGINS = [
    'https://*.onrender.com',
]
# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',  # add this
    'api',  # add this
    'channels',
    'corsheaders'
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False  # Since you're specifying origins

ASGI_APPLICATION = 'config.asgi.application'
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
]

# For production, specify allowed origins:
CORS_ALLOWED_ORIGINS = [
    "https://dashboard.wapu.cash",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:3001",
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-api-key',  # Add your custom headers here
]

if not DEBUG:
    MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')

MIDDLEWARE += [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        default=os.getenv('DATABASE_URL', 'postgresql://localhost/mydatabase'),
        conn_max_age=600,
        conn_health_checks=True,
    )
}
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

SECURE_SSL_REDIRECT = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

API_AI_KEY = os.getenv('API_AI_KEY')
# Avalanche RPC
AVALANCHE_RPC_URL = "https://api.avax.network/ext/bc/C/rpc"

# TraderJoe V2 Contract Addresses on Avalanche
TRADER_JOE_FACTORY_ADDRESS = "0x8e42f2F4101563bF679975178e880FD87d3eFd4e"  # LBFactory
TRADER_JOE_ROUTER_ADDRESS = "0xb4315e873dBcf96Ffd0acd8EA43f689D8c20fB30"   # LBRouter

# For testing, some popular pool addresses:
AVAX_USDC_POOL = "0xd446eb1660f766d533beceef890df7a69d26f7d1"  # AVAX-USDC.e pool
USDT_USDC_POOL = "0x2823299af89285ff1a1abf58db37ce57006fef5d"  # USDT-USDC pool
WAVAX_ADDRESS = "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
USDC_ADDRESS = "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
TRADER_JOE_FACTORY_ABI = [
    {
        "inputs": [
            {"internalType": "address", "name": "tokenX", "type": "address"},
            {"internalType": "address", "name": "tokenY", "type": "address"},
            {"internalType": "uint24", "name": "activeId", "type": "uint24"},
            {"internalType": "uint16", "name": "binStep", "type": "uint16"}
        ],
        "name": "createLBPair",
        "outputs": [{"internalType": "address", "name": "pair", "type": "address"}],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {"internalType": "address", "name": "tokenX", "type": "address"},
            {"internalType": "address", "name": "tokenY", "type": "address"},
            {"internalType": "uint16", "name": "binStep", "type": "uint16"}
        ],
        "name": "getLBPairInformation",
        "outputs": [
            {
                "components": [
                    {"internalType": "address", "name": "LBPair", "type": "address"},
                    {"internalType": "bool", "name": "createdByOwner", "type": "bool"},
                    {"internalType": "bool", "name": "ignoredForRouting", "type": "bool"}
                ],
                "internalType": "struct ILBFactory.LBPairInformation",
                "name": "LBPairInformation",
                "type": "tuple"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
]

TRADER_JOE_POOL_ABI = load_abi('trader_joe_pool.json')
